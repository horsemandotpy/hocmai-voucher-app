{"ast":null,"code":"import React, { useState, useRef, useEffect, createContext, useMemo, useContext, useCallback } from 'react';\n\nfunction useLoadGsiScript() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    onScriptLoadSuccess,\n    onScriptLoadError\n  } = options;\n  const [scriptLoadedSuccessfully, setScriptLoadedSuccessfully] = useState(false);\n  const onScriptLoadSuccessRef = useRef(onScriptLoadSuccess);\n  onScriptLoadSuccessRef.current = onScriptLoadSuccess;\n  const onScriptLoadErrorRef = useRef(onScriptLoadError);\n  onScriptLoadErrorRef.current = onScriptLoadError;\n  useEffect(() => {\n    const scriptTag = document.createElement('script');\n    scriptTag.src = 'https://accounts.google.com/gsi/client';\n    scriptTag.async = true;\n    scriptTag.defer = true;\n\n    scriptTag.onload = () => {\n      var _a;\n\n      setScriptLoadedSuccessfully(true);\n      (_a = onScriptLoadSuccessRef.current) === null || _a === void 0 ? void 0 : _a.call(onScriptLoadSuccessRef);\n    };\n\n    scriptTag.onerror = () => {\n      var _a;\n\n      setScriptLoadedSuccessfully(false);\n      (_a = onScriptLoadErrorRef.current) === null || _a === void 0 ? void 0 : _a.call(onScriptLoadErrorRef);\n    };\n\n    document.body.appendChild(scriptTag);\n    return () => {\n      document.body.removeChild(scriptTag);\n    };\n  }, []);\n  return scriptLoadedSuccessfully;\n}\n\nconst GoogleOAuthContext = createContext(null);\n\nfunction GoogleOAuthProvider(_ref) {\n  let {\n    clientId,\n    onScriptLoadSuccess,\n    onScriptLoadError,\n    children\n  } = _ref;\n  const scriptLoadedSuccessfully = useLoadGsiScript({\n    onScriptLoadSuccess,\n    onScriptLoadError\n  });\n  const contextValue = useMemo(() => ({\n    clientId,\n    scriptLoadedSuccessfully\n  }), [clientId, scriptLoadedSuccessfully]);\n  return React.createElement(GoogleOAuthContext.Provider, {\n    value: contextValue\n  }, children);\n}\n\nfunction useGoogleOAuth() {\n  const context = useContext(GoogleOAuthContext);\n\n  if (!context) {\n    throw new Error('Google OAuth components must be used within GoogleOAuthProvider');\n  }\n\n  return context;\n}\n\nconst containerHeightMap = {\n  large: 40,\n  medium: 32,\n  small: 20\n};\n\nfunction GoogleLogin(_ref2) {\n  let {\n    onSuccess,\n    onError,\n    useOneTap,\n    promptMomentNotification,\n    type = 'standard',\n    theme = 'outline',\n    size = 'large',\n    text,\n    shape,\n    logo_alignment,\n    width,\n    locale,\n    ...props\n  } = _ref2;\n  const btnContainerRef = useRef(null);\n  const {\n    clientId,\n    scriptLoadedSuccessfully\n  } = useGoogleOAuth();\n  const onSuccessRef = useRef(onSuccess);\n  onSuccessRef.current = onSuccess;\n  const onErrorRef = useRef(onError);\n  onErrorRef.current = onError;\n  const promptMomentNotificationRef = useRef(promptMomentNotification);\n  promptMomentNotificationRef.current = promptMomentNotification;\n  useEffect(() => {\n    var _a, _b, _c;\n\n    if (!scriptLoadedSuccessfully) return;\n    (_a = window.google) === null || _a === void 0 ? void 0 : _a.accounts.id.initialize({\n      client_id: clientId,\n      callback: credentialResponse => {\n        var _a;\n\n        if (!credentialResponse.clientId || !credentialResponse.credential) {\n          return (_a = onErrorRef.current) === null || _a === void 0 ? void 0 : _a.call(onErrorRef);\n        }\n\n        onSuccessRef.current(credentialResponse);\n      },\n      ...props\n    });\n    (_b = window.google) === null || _b === void 0 ? void 0 : _b.accounts.id.renderButton(btnContainerRef.current, {\n      type,\n      theme,\n      size,\n      text,\n      shape,\n      logo_alignment,\n      width,\n      locale\n    });\n    if (useOneTap) (_c = window.google) === null || _c === void 0 ? void 0 : _c.accounts.id.prompt(promptMomentNotificationRef.current);\n    return () => {\n      var _a;\n\n      if (useOneTap) (_a = window.google) === null || _a === void 0 ? void 0 : _a.accounts.id.cancel();\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [clientId, scriptLoadedSuccessfully, useOneTap, type, theme, size, text, shape, logo_alignment, width, locale]);\n  return React.createElement(\"div\", {\n    ref: btnContainerRef,\n    style: {\n      height: containerHeightMap[size]\n    }\n  });\n}\n\nfunction googleLogout() {\n  var _a;\n\n  (_a = window.google) === null || _a === void 0 ? void 0 : _a.accounts.id.disableAutoSelect();\n}\n/* eslint-disable import/export */\n\n\nfunction useGoogleLogin(_ref3) {\n  let {\n    flow = 'implicit',\n    scope = '',\n    onSuccess,\n    onError,\n    ...props\n  } = _ref3;\n  const {\n    clientId,\n    scriptLoadedSuccessfully\n  } = useGoogleOAuth();\n  const clientRef = useRef();\n  const onSuccessRef = useRef(onSuccess);\n  onSuccessRef.current = onSuccess;\n  const onErrorRef = useRef(onError);\n  onErrorRef.current = onError;\n  useEffect(() => {\n    var _a;\n\n    if (!scriptLoadedSuccessfully) return;\n    const clientMethod = flow === 'implicit' ? 'initTokenClient' : 'initCodeClient';\n    const client = (_a = window.google) === null || _a === void 0 ? void 0 : _a.accounts.oauth2[clientMethod]({\n      client_id: clientId,\n      scope: `openid profile email ${scope}`,\n      callback: response => {\n        var _a, _b;\n\n        if (response.error) return (_a = onErrorRef.current) === null || _a === void 0 ? void 0 : _a.call(onErrorRef, response);\n        (_b = onSuccessRef.current) === null || _b === void 0 ? void 0 : _b.call(onSuccessRef, response);\n      },\n      ...props\n    });\n    clientRef.current = client; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [clientId, scriptLoadedSuccessfully, flow, scope]);\n  const loginImplicitFlow = useCallback(overrideConfig => clientRef.current.requestAccessToken(overrideConfig), []);\n  const loginAuthCodeFlow = useCallback(() => clientRef.current.requestCode(), []);\n  return flow === 'implicit' ? loginImplicitFlow : loginAuthCodeFlow;\n}\n\nfunction useGoogleOneTapLogin(_ref4) {\n  let {\n    onSuccess,\n    onError,\n    promptMomentNotification,\n    cancel_on_tap_outside,\n    hosted_domain\n  } = _ref4;\n  const {\n    clientId,\n    scriptLoadedSuccessfully\n  } = useGoogleOAuth();\n  const onSuccessRef = useRef(onSuccess);\n  onSuccessRef.current = onSuccess;\n  const onErrorRef = useRef(onError);\n  onErrorRef.current = onError;\n  const promptMomentNotificationRef = useRef(promptMomentNotification);\n  promptMomentNotificationRef.current = promptMomentNotification;\n  useEffect(() => {\n    var _a, _b;\n\n    if (!scriptLoadedSuccessfully) return;\n    (_a = window.google) === null || _a === void 0 ? void 0 : _a.accounts.id.initialize({\n      client_id: clientId,\n      callback: credentialResponse => {\n        var _a;\n\n        if (!credentialResponse.clientId || !credentialResponse.credential) {\n          return (_a = onErrorRef.current) === null || _a === void 0 ? void 0 : _a.call(onErrorRef);\n        }\n\n        onSuccessRef.current(credentialResponse);\n      },\n      hosted_domain,\n      cancel_on_tap_outside\n    });\n    (_b = window.google) === null || _b === void 0 ? void 0 : _b.accounts.id.prompt(promptMomentNotificationRef.current);\n    return () => {\n      var _a;\n\n      (_a = window.google) === null || _a === void 0 ? void 0 : _a.accounts.id.cancel();\n    };\n  }, [clientId, scriptLoadedSuccessfully, cancel_on_tap_outside, hosted_domain]);\n}\n/**\r\n * Checks if the user granted all the specified scope or scopes\r\n * @returns True if all the scopes are granted\r\n */\n\n\nfunction hasGrantedAllScopesGoogle(tokenResponse, firstScope) {\n  if (!window.google) return false;\n\n  for (var _len = arguments.length, restScopes = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    restScopes[_key - 2] = arguments[_key];\n  }\n\n  return window.google.accounts.oauth2.hasGrantedAllScopes(tokenResponse, firstScope, ...restScopes);\n}\n/**\r\n * Checks if the user granted any of the specified scope or scopes.\r\n * @returns True if any of the scopes are granted\r\n */\n\n\nfunction hasGrantedAnyScopeGoogle(tokenResponse, firstScope) {\n  if (!window.google) return false;\n\n  for (var _len2 = arguments.length, restScopes = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n    restScopes[_key2 - 2] = arguments[_key2];\n  }\n\n  return window.google.accounts.oauth2.hasGrantedAnyScope(tokenResponse, firstScope, ...restScopes);\n}\n\nexport { GoogleLogin, GoogleOAuthProvider, googleLogout, hasGrantedAllScopesGoogle, hasGrantedAnyScopeGoogle, useGoogleLogin, useGoogleOneTapLogin };","map":null,"metadata":{},"sourceType":"module"}